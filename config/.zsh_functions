# ~/.zsh_functions - Custom ZSH Functions
# This file is sourced by .zshrc

# ============================================================================
# SSH Context Functions
# ============================================================================

# Quick context status
ssh-ctx() {
    ssh-context-manager status
}

# Switch SSH context
ssh-switch() {
    if [[ -z "$1" ]]; then
        echo "Usage: ssh-switch <work|personal>"
        return 1
    fi
    ssh-context-manager switch "$1"
}

# ============================================================================
# Git Functions
# ============================================================================

# Smart git clone with context awareness
gclone() {
    if [[ -z "$1" ]]; then
        echo "Usage: gclone <repository-url>"
        return 1
    fi
    
    local url="$1"
    local context="${SSH_AUTH_SOCK_CONTEXT:-none}"
    
    # Modify URL based on context if it's a GitHub URL
    if [[ "$url" =~ github\.com ]]; then
        if [[ "$context" == "work" ]]; then
            url="${url/github.com/github.com-work}"
        elif [[ "$context" == "personal" ]]; then
            url="${url/github.com/github.com-personal}"
        fi
    fi
    
    echo "üîÑ Cloning with $context context..."
    git clone "$url"
    
    # Extract repo name and cd into it
    local repo_name=$(basename "$url" .git)
    if [[ -d "$repo_name" ]]; then
        cd "$repo_name"
        echo "‚úì Cloned and entered $repo_name"
    fi
}

# Initialize new Git project with current context
new-project() {
    if [[ -z "$1" ]]; then
        echo "Usage: new-project <project-name>"
        return 1
    fi
    
    local project_name="$1"
    local context="${SSH_AUTH_SOCK_CONTEXT:-none}"
    
    mkdir -p "$project_name"
    cd "$project_name"
    
    git init
    echo "# $project_name" > README.md
    echo "node_modules/" > .gitignore
    echo ".env" >> .gitignore
    
    echo "‚úì Created new project: $project_name (context: $context)"
    
    if [[ "$context" != "none" ]]; then
        echo "‚úì Git will use $context configuration automatically"
    fi
}

# Show current Git user
git-whoami() {
    echo "Git Configuration:"
    echo "  Name:  $(git config user.name)"
    echo "  Email: $(git config user.email)"
    echo ""
    echo "SSH Context: ${SSH_AUTH_SOCK_CONTEXT:-none}"
}

# Quick commit with message
gcam() {
    if [[ -z "$1" ]]; then
        echo "Usage: gcam <commit-message>"
        return 1
    fi
    git add --all
    git commit -m "$1"
}

# Push current branch
gpush() {
    local current_branch=$(git branch --show-current)
    echo "üöÄ Pushing $current_branch to origin..."
    git push -u origin "$current_branch"
}

# Pull current branch
gpull() {
    local current_branch=$(git branch --show-current)
    echo "‚¨áÔ∏è  Pulling $current_branch from origin..."
    git pull origin "$current_branch"
}

# ============================================================================
# Directory Navigation
# ============================================================================

# Quick jump to work directory
work() {
    cd ~/work
    if [[ -n "$1" ]]; then
        cd "$1"
    fi
}

# Quick jump to personal directory
personal() {
    cd ~/personal
    if [[ -n "$1" ]]; then
        cd "$1"
    fi
}

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Go up N directories
up() {
    local levels=${1:-1}
    local path=""
    for ((i=0; i<levels; i++)); do
        path="../$path"
    done
    cd "$path"
}

# ============================================================================
# File Operations
# ============================================================================

# Extract any archive
extract() {
    if [[ -f "$1" ]]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find file by name
ff() {
    if command -v fd &> /dev/null; then
        fd "$1"
    else
        find . -type f -iname "*$1*"
    fi
}

# Find directory by name
fd() {
    if command -v fd &> /dev/null; then
        command fd -t d "$1"
    else
        find . -type d -iname "*$1*"
    fi
}

# ============================================================================
# Development Helpers
# ============================================================================

# Start a simple HTTP server
serve() {
    local port="${1:-8000}"
    if command -v python3 &> /dev/null; then
        echo "üåê Starting HTTP server on http://localhost:$port"
        python3 -m http.server "$port"
    elif command -v python &> /dev/null; then
        echo "üåê Starting HTTP server on http://localhost:$port"
        python -m SimpleHTTPServer "$port"
    else
        echo "Error: Python is not installed"
        return 1
    fi
}

# Get size of directory
dirsize() {
    du -sh "${1:-.}"
}

# Show disk usage of current directory
usage() {
    if command -v ncdu &> /dev/null; then
        ncdu .
    else
        du -h --max-depth=1 . | sort -hr
    fi
}

# ============================================================================
# Docker Helpers
# ============================================================================

# Docker cleanup
docker-clean() {
    echo "üßπ Cleaning Docker..."
    docker system prune -af --volumes
    echo "‚úì Docker cleanup complete"
}

# Stop all Docker containers
docker-stop-all() {
    echo "üõë Stopping all Docker containers..."
    docker stop $(docker ps -q) 2>/dev/null
    echo "‚úì All containers stopped"
}

# Remove all Docker containers
docker-rm-all() {
    echo "üóëÔ∏è  Removing all Docker containers..."
    docker rm $(docker ps -aq) 2>/dev/null
    echo "‚úì All containers removed"
}

# ============================================================================
# Network Helpers
# ============================================================================

# Get local IP
localip() {
    hostname -I | awk '{print $1}'
}

# Test internet connection
nettest() {
    echo "Testing internet connection..."
    if ping -c 1 8.8.8.8 &>/dev/null; then
        echo "‚úì Internet connection is working"
    else
        echo "‚úó No internet connection"
    fi
}

# ============================================================================
# Miscellaneous
# ============================================================================

# Create a backup of a file
backup() {
    if [[ -z "$1" ]]; then
        echo "Usage: backup <file>"
        return 1
    fi
    cp "$1" "$1.backup-$(date +%Y%m%d-%H%M%S)"
    echo "‚úì Backup created"
}

# Show command history statistics
hist-stats() {
    history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n20
}

# Quick note taking
note() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $*" >> "$HOME/notes.txt"
    echo "‚úì Note saved"
}

# Show notes
notes() {
    if [[ -f "$HOME/notes.txt" ]]; then
        cat "$HOME/notes.txt"
    else
        echo "No notes found"
    fi
}
